@model BeePM.Models.ApprovalFlow
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Flow Designer";
}

<h2>Flow Designer - @Model.Name</h2>
<hr />

<div class="row">
    <div class="col-md-9">
        <div id="canvas" style="width:100%; height:600px; border:1px solid #ccc;"></div>
    </div>
    <div class="col-md-3">
        <div id="properties-panel" style="height:600px; border:1px solid #ccc; overflow:auto;"></div>
    </div>
</div>

<div class="mt-3">
    <button id="btnSaveFlow" class="btn btn-success">💾 Kaydet</button>
    <a asp-action="Index" class="btn btn-secondary">⬅ Geri Dön</a>
</div>

@section Scripts {

    <!-- jQuery -> Select2 (SİRA ÖNEMLİ) -->
    <script src="~/lib/jquery/jquery.min.js"></script>
    <link href="~/lib/select2/select2.min.css" rel="stylesheet" />
    <script src="~/lib/select2/select2.min.js"></script>

    <!-- BPMN.io CSS -->
    <link rel="stylesheet" href="~/lib/bpmn/bpmn-js/assets/diagram-js.css" />
    <link rel="stylesheet" href="~/lib/bpmn/bpmn-js/assets/bpmn-font/css/bpmn.css" />
    <link rel="stylesheet" href="~/lib/bpmn/bpmn-js/assets/bpmn-js.css" />
    <link rel="stylesheet" href="~/lib/bpmn/bpmn-js-properties-panel/assets/properties-panel.css" />

    <!-- BPMN.io core & Properties Panel (UMD) -->
    <script src="~/lib/bpmn/bpmn-js/bpmn-modeler.production.min.js"></script>
    <script src="~/lib/bpmn/bpmn-js-properties-panel/bpmn-js-properties-panel.umd.js"></script>

    <script>
        // DB’den gelen BPMN XML (veya boş)
        const flowJson = `@Html.Raw((ViewBag.FlowJson ?? "{}").ToString().Replace("`", "\\`"))`;

        // UMD globali
        const {
          BpmnPropertiesPanelModule,
          BpmnPropertiesProviderModule,
          CamundaPlatformPropertiesProviderModule
        } = window.BpmnJSPropertiesPanel;

        // camunda.json'u yükle
        async function loadCamundaModdle() {
          try {
            const res = await fetch('@Url.Content("~/lib/bpmn/camunda.json")');
            if (!res.ok) throw new Error(res.status);
            return await res.json();
          } catch (e) {
            console.warn('camunda.json yüklenemedi, camunda özellikleri devre dışı:', e);
            return null;
          }
        }

        (async () => {
          const camundaModdle = await loadCamundaModdle();

          // Modeler (global erişim için window.*)
          window.bpmnModeler = new BpmnJS({
            container: '#canvas',
            propertiesPanel: { parent: '#properties-panel' },
            additionalModules: [
              BpmnPropertiesPanelModule,
              BpmnPropertiesProviderModule,
              CamundaPlatformPropertiesProviderModule
            ],
            moddleExtensions: camundaModdle ? { camunda: camundaModdle } : {}
          });

          // Varsayılan şablon
                 const defaultDiagram = `<?xml version="1.0" encoding="UTF-8"?>
        <bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"
            xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
            xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
            xmlns:camunda="http://camunda.org/schema/1.0/bpmn"
            targetNamespace="http://bpmn.io/schema/bpmn">
          <bpmn:process id="Process_1" isExecutable="false">
            <bpmn:startEvent id="StartEvent_1" name="Başla" />
            <bpmn:userTask id="Task_1" name="Talep Eden" camunda:assignee="" />
            <bpmn:userTask id="Task_2" name="Yönetim Onay" camunda:assignee="" />
            <bpmn:endEvent id="EndEvent_1" name="Bitir" />
            <bpmn:sequenceFlow id="flow1" sourceRef="StartEvent_1" targetRef="Task_1" />
            <bpmn:sequenceFlow id="flow2" sourceRef="Task_1" targetRef="Task_2" />
            <bpmn:sequenceFlow id="flow3" sourceRef="Task_2" targetRef="EndEvent_1" />
          </bpmn:process>
          <bpmndi:BPMNDiagram id="BPMNDiagram_1">
            <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
              <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
                <dc:Bounds x="150" y="100" width="36" height="36"/>
              </bpmndi:BPMNShape>
              <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">
                <dc:Bounds x="240" y="80" width="100" height="80"/>
              </bpmndi:BPMNShape>
              <bpmndi:BPMNShape id="Task_2_di" bpmnElement="Task_2">
                <dc:Bounds x="400" y="80" width="100" height="80"/>
              </bpmndi:BPMNShape>
              <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">
                <dc:Bounds x="550" y="100" width="36" height="36"/>
              </bpmndi:BPMNShape>
            </bpmndi:BPMNPlane>
          </bpmndi:BPMNDiagram>
        </bpmn:definitions>`;


          // Diyagramı yükle
          try {
            await bpmnModeler.importXML(flowJson && flowJson !== "{}" ? flowJson : defaultDiagram);
            bpmnModeler.get('canvas').zoom('fit-viewport');
          } catch (err) {
            console.error('BPMN import error:', err);
          }

          // Kaydet
          $('#btnSaveFlow').on('click', async function () {
            try {
              const { xml } = await bpmnModeler.saveXML({ format: true });
              const res = await fetch('@Url.Action("Save", "FlowDesigner")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
                body: new URLSearchParams({ id: '@Model.Id', flowJson: xml })
              }).then(r => r.json());

              alert(res?.success ? '✔ Süreç kaydedildi!' : '❌ Kaydetme hatası');
            } catch (e) {
              console.error(e);
              alert('❌ Kaydetme hatası: ' + e.message);
            }
          });

          // -------- Assignee alanını Select2'ye çevir --------
          const eventBus = bpmnModeler.get('eventBus');
          const modeling = bpmnModeler.get('modeling');
          const selection = bpmnModeler.get('selection');

          function enhanceAssigneeSelect() {
            const panel = document.getElementById('properties-panel');
            if (!panel) return;

            // Camunda provider'ın Assignee girişini yakala
            const container =
              panel.querySelector('[data-entry-id="assignee"]') ||
              panel.querySelector('.bio-properties-panel-entry[id*="assignee"]');

            if (!container || container.dataset.enhanced === '1') return;

            const input = container.querySelector('input');
            if (!input) return;

            container.dataset.enhanced = '1';
            input.style.display = 'none';

            const sel = document.createElement('select');
            sel.id = 'assigneeSelect2';
            sel.style.width = '100%';
            input.after(sel);

            $('#assigneeSelect2').select2({
              placeholder: 'Kullanıcı seç…',
              allowClear: true,
              width: '100%',
              ajax: {
                url: '/FlowDesigner/Users',
                dataType: 'json',
                delay: 250,
                data: params => ({ term: params?.term ?? '' }),
                processResults: data => ({ results: data })
              }
            });

            // mevcut değer
            const currentVal = input.value || (selection.get()[0]?.businessObject?.$attrs?.['camunda:assignee'] ?? '');
            if (currentVal) {
              const opt = new Option(String(currentVal), String(currentVal), true, true);
              $('#assigneeSelect2').append(opt).trigger('change');
            }

            // değişiklik
            $('#assigneeSelect2').on('change', function () {
              const el = selection.get()[0];
              if (!el) return;
              const val = $(this).val() || '';
              input.value = val; // panel iç durumu da güncel kalsın
              modeling.updateProperties(el, { 'camunda:assignee': val });
            });
          }

          // panel yeniden çizildiğinde Select2'yi tekrar uygula
          const obs = new MutationObserver(() => setTimeout(enhanceAssigneeSelect, 50));
          obs.observe(document.getElementById('properties-panel'), { childList: true, subtree: true });

          // ilk yükleme & seçim değişimi
          setTimeout(enhanceAssigneeSelect, 200);
          eventBus.on('selection.changed', () => setTimeout(enhanceAssigneeSelect, 50));
        })();
    </script>
}
<script>
        document.addEventListener("DOMContentLoaded", function () {
        setTimeout(() => {
            const eventBus = window.bpmnModeler.get('eventBus');
            const modeling = window.bpmnModeler.get('modeling');

            function enhanceAssigneeSelect() {
                const panel = document.getElementById('properties-panel');
                if (!panel) return;

                const entry = panel.querySelector('input[name="assignee"]');
                if (!entry || entry.dataset.enhanced) return;

                entry.dataset.enhanced = "1";
                const sel = document.createElement('select');
                sel.style.width = '100%';
                entry.parentElement.appendChild(sel);
                entry.style.display = 'none';

                $(sel).select2({
                    placeholder: 'Kullanıcı seç…',
                    ajax: {
                        url: '/FlowDesigner/Users',
                        dataType: 'json',
                        delay: 250,
                        processResults: data => ({ results: data })
                    }
                });

                $(sel).on('change', function () {
                    const val = $(this).val() || '';
                    const el = window.bpmnModeler.get('selection').get()[0];
                    if (el) modeling.updateProperties(el, { 'camunda:assignee': val });
                });
            }

            // Property panel yeniden çizildikçe tetikle
            const obs = new MutationObserver(() => setTimeout(enhanceAssigneeSelect, 200));
            obs.observe(document.getElementById('properties-panel'), { childList: true, subtree: true });
        }, 1000);
    });

</script>
